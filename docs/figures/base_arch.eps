%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 506 186
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, August 9, 2013 12:02:00 AM CDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
506 186 setpagesize
0 0 0 0 setmargins
0 0 setorigin
506 186 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
506.000 0.00000 l
506.000 186.000 l
0.00000 186.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 506 186 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -237.000 -207.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
237.000 207.000 m
743.000 207.000 l
743.000 393.000 l
237.000 393.000 l
237.000 207.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -237.000 -207.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -237.000 -207.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -237.000 -207.000 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
421.000 244.500 m
728.000 244.500 l
728.000 377.500 l
421.000 377.500 l
421.000 244.500 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
536.446 226.920 m
541.978 226.920 l
541.978 227.920 l
537.634 227.920 l
537.634 230.514 l
541.806 230.514 l
541.806 231.498 l
537.634 231.498 l
537.634 234.670 l
542.087 234.670 l
542.087 235.670 l
536.446 235.670 l
536.446 226.920 l
h
550.591 227.592 m
550.591 228.842 l
550.185 228.467 549.757 228.188 549.310 228.006  c
548.862 227.824 548.382 227.732 547.872 227.732  c
546.872 227.732 546.106 228.040 545.575 228.654  c
545.044 229.269 544.778 230.154 544.778 231.311  c
544.778 232.456 545.044 233.337 545.575 233.951  c
546.106 234.566 546.872 234.873 547.872 234.873  c
548.382 234.873 548.862 234.779 549.310 234.592  c
549.757 234.404 550.185 234.128 550.591 233.764  c
550.591 234.998 l
550.174 235.279 549.734 235.490 549.271 235.631  c
548.807 235.771 548.320 235.842 547.810 235.842  c
546.476 235.842 545.429 235.436 544.669 234.623  c
543.909 233.811 543.528 232.706 543.528 231.311  c
543.528 229.904 543.909 228.795 544.669 227.982  c
545.429 227.170 546.476 226.764 547.810 226.764  c
548.330 226.764 548.823 226.834 549.286 226.975  c
549.750 227.115 550.185 227.321 550.591 227.592  c
h
553.532 234.670 m
557.673 234.670 l
557.673 235.670 l
552.110 235.670 l
552.110 234.670 l
552.558 234.212 553.170 233.589 553.946 232.803  c
554.722 232.016 555.209 231.508 555.407 231.279  c
555.793 230.863 556.061 230.506 556.212 230.209  c
556.363 229.912 556.438 229.623 556.438 229.342  c
556.438 228.873 556.274 228.493 555.946 228.201  c
555.618 227.910 555.194 227.764 554.673 227.764  c
554.298 227.764 553.905 227.826 553.493 227.951  c
553.082 228.076 552.642 228.274 552.173 228.545  c
552.173 227.342 l
552.652 227.154 553.097 227.011 553.509 226.912  c
553.920 226.813 554.298 226.764 554.642 226.764  c
555.548 226.764 556.272 226.990 556.813 227.443  c
557.355 227.896 557.626 228.503 557.626 229.264  c
557.626 229.618 557.558 229.956 557.423 230.279  c
557.287 230.602 557.043 230.982 556.688 231.420  c
556.584 231.535 556.272 231.863 555.751 232.404  c
555.230 232.946 554.491 233.701 553.532 234.670  c
h
563.856 226.920 m
565.044 226.920 l
565.044 235.670 l
563.856 235.670 l
563.856 226.920 l
h
572.817 231.701 m
572.817 235.670 l
571.739 235.670 l
571.739 231.748 l
571.739 231.123 571.617 230.657 571.372 230.350  c
571.127 230.042 570.765 229.889 570.286 229.889  c
569.703 229.889 569.242 230.074 568.903 230.443  c
568.565 230.813 568.396 231.321 568.396 231.967  c
568.396 235.670 l
567.317 235.670 l
567.317 229.107 l
568.396 229.107 l
568.396 230.123 l
568.656 229.727 568.961 229.433 569.310 229.240  c
569.659 229.048 570.062 228.951 570.521 228.951  c
571.271 228.951 571.841 229.183 572.231 229.646  c
572.622 230.110 572.817 230.795 572.817 231.701  c
h
579.142 229.295 m
579.142 230.326 l
578.840 230.170 578.524 230.053 578.196 229.975  c
577.868 229.896 577.527 229.857 577.173 229.857  c
576.642 229.857 576.241 229.938 575.970 230.100  c
575.699 230.261 575.563 230.508 575.563 230.842  c
575.563 231.092 575.660 231.287 575.853 231.428  c
576.045 231.568 576.433 231.701 577.017 231.826  c
577.376 231.920 l
578.147 232.076 578.694 232.305 579.017 232.607  c
579.340 232.910 579.501 233.326 579.501 233.857  c
579.501 234.472 579.259 234.956 578.774 235.311  c
578.290 235.665 577.626 235.842 576.782 235.842  c
576.428 235.842 576.061 235.808 575.681 235.740  c
575.300 235.673 574.902 235.571 574.485 235.436  c
574.485 234.311 l
574.881 234.519 575.272 234.675 575.657 234.779  c
576.043 234.883 576.428 234.936 576.813 234.936  c
577.313 234.936 577.701 234.850 577.978 234.678  c
578.254 234.506 578.392 234.258 578.392 233.936  c
578.392 233.644 578.293 233.420 578.095 233.264  c
577.897 233.107 577.465 232.956 576.798 232.811  c
576.423 232.732 l
575.756 232.587 575.274 232.368 574.978 232.076  c
574.681 231.785 574.532 231.389 574.532 230.889  c
574.532 230.264 574.751 229.785 575.188 229.451  c
575.626 229.118 576.246 228.951 577.048 228.951  c
577.444 228.951 577.819 228.980 578.173 229.037  c
578.527 229.094 578.850 229.180 579.142 229.295  c
h
582.284 227.248 m
582.284 229.107 l
584.503 229.107 l
584.503 229.951 l
582.284 229.951 l
582.284 233.514 l
582.284 234.045 582.357 234.386 582.503 234.537  c
582.649 234.688 582.946 234.764 583.394 234.764  c
584.503 234.764 l
584.503 235.670 l
583.394 235.670 l
582.560 235.670 581.985 235.514 581.667 235.201  c
581.349 234.889 581.190 234.326 581.190 233.514  c
581.190 229.951 l
580.409 229.951 l
580.409 229.107 l
581.190 229.107 l
581.190 227.248 l
582.284 227.248 l
h
588.896 232.373 m
588.031 232.373 587.429 232.472 587.091 232.670  c
586.752 232.868 586.583 233.206 586.583 233.686  c
586.583 234.071 586.711 234.376 586.966 234.600  c
587.221 234.824 587.562 234.936 587.989 234.936  c
588.593 234.936 589.075 234.725 589.435 234.303  c
589.794 233.881 589.974 233.316 589.974 232.607  c
589.974 232.373 l
588.896 232.373 l
h
591.052 231.920 m
591.052 235.670 l
589.974 235.670 l
589.974 234.670 l
589.724 235.066 589.416 235.360 589.052 235.553  c
588.687 235.745 588.239 235.842 587.708 235.842  c
587.031 235.842 586.494 235.652 586.099 235.271  c
585.703 234.891 585.505 234.389 585.505 233.764  c
585.505 233.024 585.752 232.467 586.247 232.092  c
586.742 231.717 587.479 231.529 588.458 231.529  c
589.974 231.529 l
589.974 231.420 l
589.974 230.920 589.810 230.535 589.481 230.264  c
589.153 229.993 588.698 229.857 588.114 229.857  c
587.739 229.857 587.372 229.904 587.013 229.998  c
586.653 230.092 586.312 230.227 585.989 230.404  c
585.989 229.404 l
586.385 229.248 586.768 229.133 587.138 229.061  c
587.507 228.988 587.869 228.951 588.224 228.951  c
589.172 228.951 589.880 229.196 590.349 229.686  c
590.817 230.175 591.052 230.920 591.052 231.920  c
h
598.733 231.701 m
598.733 235.670 l
597.655 235.670 l
597.655 231.748 l
597.655 231.123 597.533 230.657 597.288 230.350  c
597.043 230.042 596.681 229.889 596.202 229.889  c
595.619 229.889 595.158 230.074 594.819 230.443  c
594.481 230.813 594.312 231.321 594.312 231.967  c
594.312 235.670 l
593.233 235.670 l
593.233 229.107 l
594.312 229.107 l
594.312 230.123 l
594.572 229.727 594.877 229.433 595.226 229.240  c
595.575 229.048 595.978 228.951 596.437 228.951  c
597.187 228.951 597.757 229.183 598.147 229.646  c
598.538 230.110 598.733 230.795 598.733 231.701  c
h
605.604 229.357 m
605.604 230.373 l
605.292 230.196 604.985 230.066 604.683 229.982  c
604.381 229.899 604.073 229.857 603.761 229.857  c
603.052 229.857 602.506 230.079 602.120 230.521  c
601.735 230.964 601.542 231.587 601.542 232.389  c
601.542 233.191 601.735 233.813 602.120 234.256  c
602.506 234.699 603.052 234.920 603.761 234.920  c
604.073 234.920 604.381 234.878 604.683 234.795  c
604.985 234.712 605.292 234.587 605.604 234.420  c
605.604 235.420 l
605.302 235.555 604.990 235.660 604.667 235.732  c
604.344 235.805 604.000 235.842 603.636 235.842  c
602.646 235.842 601.860 235.532 601.276 234.912  c
600.693 234.292 600.401 233.451 600.401 232.389  c
600.401 231.326 600.696 230.488 601.284 229.873  c
601.873 229.258 602.683 228.951 603.714 228.951  c
604.037 228.951 604.357 228.985 604.675 229.053  c
604.993 229.120 605.302 229.222 605.604 229.357  c
h
613.093 232.123 m
613.093 232.639 l
608.124 232.639 l
608.176 233.389 608.403 233.956 608.804 234.342  c
609.205 234.727 609.759 234.920 610.468 234.920  c
610.884 234.920 611.288 234.870 611.679 234.771  c
612.069 234.673 612.457 234.519 612.843 234.311  c
612.843 235.342 l
612.447 235.498 612.046 235.620 611.640 235.709  c
611.233 235.798 610.822 235.842 610.405 235.842  c
609.364 235.842 608.535 235.537 607.921 234.928  c
607.306 234.318 606.999 233.493 606.999 232.451  c
606.999 231.378 607.291 230.527 607.874 229.896  c
608.457 229.266 609.239 228.951 610.218 228.951  c
611.103 228.951 611.804 229.235 612.319 229.803  c
612.835 230.370 613.093 231.144 613.093 232.123  c
h
612.015 231.795 m
612.004 231.212 611.838 230.743 611.515 230.389  c
611.192 230.035 610.765 229.857 610.233 229.857  c
609.629 229.857 609.147 230.029 608.788 230.373  c
608.429 230.717 608.223 231.196 608.171 231.811  c
612.015 231.795 l
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
421.000 244.500 m
728.000 244.500 l
728.000 377.500 l
421.000 377.500 l
421.000 244.500 l
h
S
2 J
10.0000 M
q
[ 42.0000 0.00000 0.00000 42.0000 252.281 290.139 ] concat
<<
/ImageType 1
/Width 42  /Height 42
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [42 0 0 42 0 0]
/DataSource currentfile /ASCII85Decode filter /DCTDecode filter 
>> image
s4IA0!"_al8O`[\!WW3$!!*'"s4[N@!!ic5#6k>;#6tJ?#m^kH'FbHY$Odmc'+Yct)BU"@)B9_>,VCGe
+tOrY*%3`p/2/e81c-:%3B]>W4>&EH1B6)/6NIK"#n.1M(_$ok1*IV\1,:U?1,:U?1,:U?1,:U?1,:U?
1,:U?1,:U?1,:U?1,:U?1,:U?1,:U?1,:U?1,AmF!"fJ:.KCq#!?qLF&HMtG!WU(<*rl9A"T\W)!<E3$
z!!!!"!WrQ/"pYD?$4HmP!4<@<!W`B*!X&T/"U"r.!!.KK!WrE*&Hrdj0gQ!W;.0\RE>10ZOeE%*6F"?
A;UOtZ1LbBV#mqFa(`=5<-7:2j.Ps"@2`NfY6UX@47n?3D;cHat='/U/@q9._B4u!oF*)PJGBeCZK7nr
5LPUeEP*;,qQC!u,R\HRQV5C/hWN*81['d?O\@K2f_o0O6a2lBFdaQ^rf%8R-g>V&OjQ5OekiqC&o(2M
Hp@n@XqZ"J6*ru?D!<E3%!<E3%!<<*"!!!!"!WrQ/"pYD?$4HmP!4<C=!W`?*"9Sc3"U"r.!<RHF!<N?
8"9fr'"qj4!#@VTc+u4]T'LIqUZ,$_k1K*]W@WKj'(*k`q-1Mcg)&ahL-n-W'2E*TU3^Z;(7Rp!@8lJ\
h<``C+>%;)SAnPdkC3+K>G'A1VH@gd&KnbA=M2II[Pa.Q$R$jD;USO``Vl6SpZEppG[^WcW]#)A'`Q#s
>ai`&\eCE.%f\,!<j5f=akNM0qo(2MHp@n@XqZ#7L$j-M1!YGMH!'^JXMn?L#i%iO/?JP4VDLWAVc+E=
#W)6(obhW<go_^3Yi][4!-,#NqgHkYPpH<Nl&Q<BOjP*.a&-Yn,<,n'#!8"CMF<_]=E`[)8WErK$i>6$
aX*`UaM.F,GQjf8\WfMOK;GF7=AJpY6+aAOZ@Oig)^18Z4D%PPb89'e'+3q*e\OJ/h4/iJH,]k*b8uU0
9h%8j2m*@uFot*q5horNJ8Eq]t]S")1;J?%X0p4q-.j-u5rr@E:5HT81F5j-u;tkHJ:):1:%srDDY,E7
U?W)+#A4a*K=CkSCGOumS'ggAI\4On"6?\!8F?09apPtqq1KTV!/:fmNEX)WLUEB9q5E0_XOioE4U)tf
'j<)1piTP(+V%l%*q&WgBiDHd7@p"J2i`Y:M9'7X`HZZ2;TTQ>uc\DqHC?N(@fDI,2e#^-,#!XUoWVi+
\C-,f1Cf@Vfa3Nk@+62`hU[Hd$/T,7/!]t*Cg4@+s_m>E9_>QED,/$=oBk4Q$bXClY:3R1mY:.juqf>a
Q&aib,2IM"Aj;ae@p$;saLo?sM;1Jm[>WCl4.XR`=']1]N)1):=%_5tTO:B*m5)9(9!1muLYC&4/BTk9
,<FQqnV3ED6Z-OMI2=/gn'JX[)\T^O9n;s[G[V(L5ZBEI+Z`HSAq3E4-El6KKIGWYQMbMWCLCdR`:D06
7(<Bj(hsiSi1MM/\SfHBdr6BM8ja#eWiigB@72V%A<(5^pMui]TAP?Tc\jmc')On'G1#Y>(%1Na?"?"Y
g8F>b.ci3uLWM5:AC/gHiF%Gr&du??X`;eK~>
Q
1.00000 .800000 0.00000 RG
newpath
465.000 270.000 m
547.000 270.000 l
547.000 352.000 l
465.000 352.000 l
465.000 270.000 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
495.962 311.186 m
495.962 315.154 l
494.884 315.154 l
494.884 311.232 l
494.884 310.607 494.761 310.141 494.517 309.834  c
494.272 309.527 493.910 309.373 493.431 309.373  c
492.847 309.373 492.386 309.558 492.048 309.928  c
491.709 310.298 491.540 310.805 491.540 311.451  c
491.540 315.154 l
490.462 315.154 l
490.462 308.592 l
491.540 308.592 l
491.540 309.607 l
491.800 309.212 492.105 308.917 492.454 308.725  c
492.803 308.532 493.207 308.436 493.665 308.436  c
494.415 308.436 494.985 308.667 495.376 309.131  c
495.767 309.594 495.962 310.279 495.962 311.186  c
h
502.427 311.795 m
502.427 311.014 502.265 310.410 501.942 309.982  c
501.619 309.555 501.166 309.342 500.583 309.342  c
500.010 309.342 499.562 309.555 499.239 309.982  c
498.916 310.410 498.755 311.014 498.755 311.795  c
498.755 312.576 498.916 313.180 499.239 313.607  c
499.562 314.035 500.010 314.248 500.583 314.248  c
501.166 314.248 501.619 314.035 501.942 313.607  c
502.265 313.180 502.427 312.576 502.427 311.795  c
h
503.505 314.342 m
503.505 315.456 503.257 316.287 502.763 316.834  c
502.268 317.381 501.505 317.654 500.474 317.654  c
500.099 317.654 499.742 317.626 499.403 317.568  c
499.065 317.511 498.739 317.425 498.427 317.311  c
498.427 316.264 l
498.739 316.430 499.052 316.555 499.364 316.639  c
499.677 316.722 499.989 316.764 500.302 316.764  c
501.010 316.764 501.541 316.579 501.896 316.209  c
502.250 315.839 502.427 315.279 502.427 314.529  c
502.427 313.998 l
502.198 314.383 501.911 314.673 501.567 314.865  c
501.224 315.058 500.807 315.154 500.317 315.154  c
499.515 315.154 498.867 314.847 498.372 314.232  c
497.877 313.618 497.630 312.805 497.630 311.795  c
497.630 310.785 497.877 309.972 498.372 309.357  c
498.867 308.743 499.515 308.436 500.317 308.436  c
500.807 308.436 501.224 308.532 501.567 308.725  c
501.911 308.917 502.198 309.206 502.427 309.592  c
502.427 308.592 l
503.505 308.592 l
503.505 314.342 l
h
505.716 308.592 m
506.794 308.592 l
506.794 315.154 l
505.716 315.154 l
505.716 308.592 l
h
505.716 306.029 m
506.794 306.029 l
506.794 307.404 l
505.716 307.404 l
505.716 306.029 l
h
514.519 311.186 m
514.519 315.154 l
513.440 315.154 l
513.440 311.232 l
513.440 310.607 513.318 310.141 513.073 309.834  c
512.828 309.527 512.466 309.373 511.987 309.373  c
511.404 309.373 510.943 309.558 510.604 309.928  c
510.266 310.298 510.097 310.805 510.097 311.451  c
510.097 315.154 l
509.019 315.154 l
509.019 308.592 l
510.097 308.592 l
510.097 309.607 l
510.357 309.212 510.662 308.917 511.011 308.725  c
511.360 308.532 511.763 308.436 512.222 308.436  c
512.972 308.436 513.542 308.667 513.933 309.131  c
514.323 309.594 514.519 310.279 514.519 311.186  c
h
522.124 308.592 m
519.749 311.779 l
522.233 315.154 l
520.968 315.154 l
519.062 312.576 l
517.155 315.154 l
515.874 315.154 l
518.421 311.717 l
516.093 308.592 l
517.358 308.592 l
519.108 310.936 l
520.843 308.592 l
522.124 308.592 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
465.000 270.000 m
547.000 270.000 l
547.000 352.000 l
465.000 352.000 l
465.000 270.000 l
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
600.000 270.000 m
682.000 270.000 l
682.000 352.000 l
600.000 352.000 l
600.000 270.000 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
626.021 307.373 m
626.021 314.186 l
627.459 314.186 l
628.667 314.186 629.550 313.912 630.107 313.365  c
630.665 312.818 630.943 311.951 630.943 310.764  c
630.943 309.597 630.665 308.740 630.107 308.193  c
629.550 307.646 628.667 307.373 627.459 307.373  c
626.021 307.373 l
h
624.834 306.404 m
627.271 306.404 l
628.969 306.404 630.214 306.756 631.006 307.459  c
631.798 308.162 632.193 309.264 632.193 310.764  c
632.193 312.274 631.795 313.383 630.998 314.092  c
630.201 314.800 628.959 315.154 627.271 315.154  c
624.834 315.154 l
624.834 306.404 l
h
639.652 311.607 m
639.652 312.123 l
634.684 312.123 l
634.736 312.873 634.962 313.441 635.363 313.826  c
635.764 314.212 636.319 314.404 637.027 314.404  c
637.444 314.404 637.848 314.355 638.238 314.256  c
638.629 314.157 639.017 314.003 639.402 313.795  c
639.402 314.826 l
639.007 314.982 638.605 315.105 638.199 315.193  c
637.793 315.282 637.382 315.326 636.965 315.326  c
635.923 315.326 635.095 315.021 634.480 314.412  c
633.866 313.803 633.559 312.977 633.559 311.936  c
633.559 310.863 633.850 310.011 634.434 309.381  c
635.017 308.751 635.798 308.436 636.777 308.436  c
637.663 308.436 638.363 308.719 638.879 309.287  c
639.395 309.855 639.652 310.628 639.652 311.607  c
h
638.574 311.279 m
638.564 310.696 638.397 310.227 638.074 309.873  c
637.751 309.519 637.324 309.342 636.793 309.342  c
636.189 309.342 635.707 309.514 635.348 309.857  c
634.988 310.201 634.783 310.680 634.730 311.295  c
638.574 311.279 l
h
640.645 308.592 m
641.785 308.592 l
643.832 314.092 l
645.895 308.592 l
647.035 308.592 l
644.566 315.154 l
643.098 315.154 l
640.645 308.592 l
h
649.559 314.170 m
649.559 317.654 l
648.480 317.654 l
648.480 308.592 l
649.559 308.592 l
649.559 309.592 l
649.788 309.196 650.074 308.904 650.418 308.717  c
650.762 308.529 651.173 308.436 651.652 308.436  c
652.454 308.436 653.105 308.751 653.605 309.381  c
654.105 310.011 654.355 310.842 654.355 311.873  c
654.355 312.904 654.105 313.738 653.605 314.373  c
653.105 315.008 652.454 315.326 651.652 315.326  c
651.173 315.326 650.762 315.230 650.418 315.037  c
650.074 314.844 649.788 314.555 649.559 314.170  c
h
653.230 311.873 m
653.230 311.081 653.066 310.462 652.738 310.014  c
652.410 309.566 651.965 309.342 651.402 309.342  c
650.829 309.342 650.379 309.566 650.051 310.014  c
649.723 310.462 649.559 311.081 649.559 311.873  c
649.559 312.665 649.723 313.287 650.051 313.740  c
650.379 314.193 650.829 314.420 651.402 314.420  c
651.965 314.420 652.410 314.193 652.738 313.740  c
653.066 313.287 653.230 312.665 653.230 311.873  c
h
656.129 308.592 m
657.207 308.592 l
657.207 315.154 l
656.129 315.154 l
656.129 308.592 l
h
656.129 306.029 m
657.207 306.029 l
657.207 307.404 l
656.129 307.404 l
656.129 306.029 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
600.000 270.000 m
682.000 270.000 l
682.000 352.000 l
600.000 352.000 l
600.000 270.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
293.976 311.000 m
457.000 311.000 l
S
newpath
465.000 311.000 m
453.000 306.000 l
456.000 311.000 l
453.000 316.000 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
547.000 311.000 m
592.000 311.000 l
S
newpath
600.000 311.000 m
588.000 306.000 l
591.000 311.000 l
588.000 316.000 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
